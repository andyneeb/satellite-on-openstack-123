- name: Refresh Capsule
  command: hammer capsule refresh-features --id=1

- name: Set download policy
  command: hammer settings set --name default_download_policy --value on_demand

- name: Check if manifest file exists
  stat:
    path: "{{ manifest_file }}"
  register: stat_result

- assert:
    that: stat_result.stat.exists == True
    msg: "Manifest file not found."

- name: Check if manifest already exists
  shell: hammer subscription list --organization {{ org }} |grep "[0-9]"
  register: manifest_output

- name: Upload Satellite Manifest
  command: hammer subscription upload --organization {{ org }} --file {{ manifest_file }}
  when: manifest_output.rc != 0

- name: Refresh manifest
  command: hammer subscription refresh-manifest --organization {{ org }}
  when: manifest_output.rc != 0

- name: Load OpenScap
  command: foreman-rake foreman_openscap:bulk_upload:default

- name: Create puppet environment directory
  file:
    path: /etc/puppet/environments/production/modules
    state: directory
    owner: root
    group: root
    recurse: yes
    mode: 0775

- name: Check if 7server repository is enabled
  shell:  hammer repository list --organization {{ org }} |grep "7Server"
  register: rhel7_server_repo_output
  ignore_errors: True

- name: Enable RHEL 7 Server Repository
  shell: hammer repository-set enable --organization {{ org }} --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Enterprise Linux 7 Server (RPMs)'
  when: rhel7_server_repo_output.rc != 0

- name: Syncronize RHEL 7 Server Repository
  shell: time hammer repository synchronize --organization {{ org }} --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Enterprise Linux 7 Server RPMs x86_64 7Server'
  register: rhel7_server_output
  when: rhel7_server_repo_output.rc != 0

- debug:
    msg: "{{ rhel7_server_output }}"

- name: check if satellite tools repository is enabled
  shell:  hammer repository list --organization {{ org }} |grep "Red Hat Satellite Tools 6.3"
  register: satellite_tools_repo_output
  ignore_errors: True

- name: Enable Satellite 6 Tools Repository
  shell: hammer repository-set enable --organization {{ org }} --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Satellite Tools 6.3 (for RHEL 7 Server) (RPMs)'
  when: satellite_tools_repo_output.rc != 0

- name: Synchronize Satellite 6 Tools Repository
  shell: time hammer repository synchronize --organization {{ org }} --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Satellite Tools 6.3 for RHEL 7 Server RPMs x86_64'
  register: satellite6_tools_output
  when: satellite_tools_repo_output.rc != 0

- debug:
    msg: "{{ satellite6_tools_output }}"

- name: check if satellite puppet tools repository is enabled
  shell:  hammer repository list --organization {{ org }} |grep "Red Hat Satellite Tools 6.3 - Puppet 4"
  register: satellite_puppet_tools_repo_output
  ignore_errors: True

- name: Enable Satellite 6 Puppet Tools Repository
  shell: hammer repository-set enable --organization {{ org }} --product 'Red Hat Enterprise Linux Server' --basearch='x86_64' --name 'Red Hat Satellite Tools 6.3 - Puppet 4 (for RHEL 7 Server) (RPMs)'
  when: satellite_puppet_tools_repo_output.rc != 0

- name: Synchronize Satellite 6 Puppet Tools Repository
  shell: time hammer repository synchronize --organization {{ org }} --product 'Red Hat Enterprise Linux Server' --name 'Red Hat Satellite Tools 6.3 - Puppet 4 for RHEL 7 Server RPMs x86_64'
  register: satellite6_puppet_tools_output
  when: satellite_puppet_tools_repo_output.rc != 0

- debug:
    msg: "{{ satellite6_puppet_tools_output }}"

- name: Check if software collections repositoriy is enabled
  shell: hammer repository list --organization {{ org }} |grep "Red Hat Software Collections"
  register: software_collections_repo_output
  ignore_errors: True

- name: Enable Software Collections Repository
  shell: hammer repository-set enable --organization {{ org }} --product 'Red Hat Software Collections for RHEL Server' --basearch='x86_64' --releasever='7Server' --name 'Red Hat Software Collections RPMs for Red Hat Enterprise Linux 7 Server'
  when: software_collections_repo_output.rc != 0

- name: Synchronize Satellite 6 Software Collections Repository
  shell: time hammer repository synchronize --organization {{ org }} --product 'Red Hat Software Collections for RHEL Server'  --name  'Red Hat Software Collections RPMs for Red Hat Enterprise Linux 7 Server x86_64 7Server'
  register: software_collections_output
  when: software_collections_repo_output.rc != 0

- debug:
    msg: "{{ software_collections_output }}"

- name: Check for puppet forge product
  shell: hammer product list --organization {{ org }} | grep "Puppet Forge"
  register: puppet_output
  ignore_errors: True

- name: Create Product for Puppet Forge
  shell: hammer product create --name='Puppet Forge' --organization {{ org }}
  when: puppet_output.rc != 0

- name: Create repository for puppet forge
  shell: hammer repository create  --organization {{ org }} --name='Modules' --product='Puppet Forge' --content-type='puppet' --publish-via-http=true --url=http://forge.puppetlabs.com/
  when: puppet_output.rc != 0

- name: Synchronize puppet forge repository
  shell: time hammer repository synchronize --organization {{ org }} --product 'Puppet Forge'  --name  'Modules'
  register: puppet_forge_output
  when: puppet_output.rc != 0

- debug:
    msg: "{{ puppet_forge_output }}"

- name: Check if sync plan exists
  shell: hammer sync-plan list --organization {{ org }} |grep "daily sync"
  register: sync_plan_output
  ignore_errors: True

- name: Create a daily sync plan
  shell: hammer sync-plan create --name "daily sync" --enabled=true --interval daily --organization {{ org }} --sync-date "2018-05-01 01:00:00"
  when: sync_plan_output.rc != 0

- name: Check if development lifecycle environment exists
  shell: hammer lifecycle-environment list --organization {{ org }} |grep "Development"
  register: development_output
  ignore_errors: True

- name: Create Development Lifecycle Environment
  shell: hammer lifecycle-environment create --organization {{ org }} --description 'Development' --name 'Development' --label development --prior Library
  when: development_output.rc != 0

- name: Check if test lifecycle environment exists
  shell: hammer lifecycle-environment list --organization {{ org }} |grep "Test"
  register: test_output
  ignore_errors: True

- name: Create test Lifecycle Environment
  shell: hammer lifecycle-environment create --organization {{ org }} --description 'Test' --name 'Test' --label test --prior 'Development'
  when: test_output.rc != 0

- name: Check if production lifecycle environment exists
  shell: hammer lifecycle-environment list --organization {{ org }} |grep "Production"
  register: production_output
  ignore_errors: True

- name: Create Production Lifecycle Environment
  shell: hammer lifecycle-environment create --organization {{ org }} --description 'Production' --name 'Production' --label production --prior 'Test'
  when: production_output.rc != 0

- name: Check if un-staged lifecycle environment exists
  shell: hammer lifecycle-environment list --organization {{ org }} |grep "UnStaged"
  register: unstaged_output
  ignore_errors: True

- name: Create Un-Staged Lifecycle Environment
  shell: hammer lifecycle-environment create --organization {{ org }} --description 'Latest packages without staging' --name 'UnStaged' --label unstaged --prior Library
  when: unstaged_output.rc != 0
